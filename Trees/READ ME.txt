RED-BLACK - NetBeans IDE 8.2
11/08/17
Comp 280
Developers: Parker Perrine, Beck Heidmous
------------------------------------------------------------------------------------------------
METHODS:

The idea behind the code is simple, it takes whatever test file you loaded whether it is a string or an integer and converts it into a string for the sake of memory and speed. This is used in our file reader, and our convert file methods:

SCANNER:
        File main = ConvertFile(host.getAbsolutePath());
        HostPath = host.getAbsolutePath();
        String HostName = host.getName();
        HostPath = HostPath.substring(0, HostPath.length() - HostName.length());
        HostPath += "Parker_TreeTraversal.txt";
        ReadFile(main);

CONVERT: (Reads anyfile as a utf-8 encoding because netbeans can be picky on encoding types. It also writes the program out in the same endocing type.)
        try {
            InputStream HostFile = new FileInputStream(path);
            Reader file = new InputStreamReader(HostFile, Charset.forName("Cp1252"));
            PrintWriter writer = new PrintWriter(".\\Temp.txt", "UTF-8");

            while (file.ready()) {
                writer.print((char) file.read());
            }

            Scanner TempFile = new Scanner(new File(".\\Temp.txt"));

            writer.close();
            TempFile.close();
            HostFile.close();
            file.close();
            TempFile.close();

The code is designed to catch errors as they persist and store them into an errors display tree to be printed back to you. Using ourSystem.out.println("Error"); Methods which are dotted around the entire program for testing and using purposes.

ADD: (This method is a simple check left and right for appropriate spot method. it is a simple recursive method that check if the tree is null, and if it is to add the parent/leaf node to that location, it then repeats untill the code is over)
        RedBlackNode<T> y = nil;
        RedBlackNode<T> x = root;
        while (!isNil(x)) {
            y = x;
            if (z.key.compareTo(x.key) < 0) {
                x.numLeft++;
                x = x.left;
            } 
            else {
                x.numRight++;
                x = x.right;
            }
        }

REM: (Recursivly checks from the bottom up on the node it needs to remove, it then proceeds to rewrite the tree so that the deleted node doesn't get removed with whatever is attached to it, it isolates the target and deletes only that node then tacts on the remaing values in the approriate spot (It takes care of recoloration and ancestory as the program proceeds.
	RedBlackNode<T> current = nil;
        RedBlackNode<T> track = nil;
        if (isNil(x)) {
            current = y.parent;
            track = y;
        } 
        else {
            current = x.parent;
            track = x;
        }        
        while (!isNil(current)) {
            if (y.key != current.key){
                if (y.key.compareTo(current.key) > 0) {
                    current.numRight--;
                }

ROTATE, FIX ROTATE:
This method is designed to check and rotate the tree accordingly, it is the main methd behind if there is a certain node deleted everything gets rotated and recolored to match the requirments of a red black tree system:
	if (isNil(x.left) && isNil(x.right.left)) {
            x.numLeft = 0;
            x.numRight = 0;
            x.right.numLeft = 1;
        } // Case 2: x.right.left also exists in addition to Case 1
        else if (isNil(x.left) && !isNil(x.right.left)) {
            x.numLeft = 0;
            x.numRight = 1 + x.right.left.numLeft
                    + x.right.left.numRight;
            x.right.numLeft = 2 + x.right.left.numLeft
                    + x.right.left.numRight;

RECOLORE SAMPLE CODE:
(This is apart of the ADD/ Insert METHOD at line 221)
	 if (y.color == RedBlackNode.RED) {
                    z.parent.color = RedBlackNode.BLACK;
                    y.color = RedBlackNode.BLACK;
                    z.parent.parent.color = RedBlackNode.RED;
                    z = z.parent.parent;
---------------------------------------------------------------------------------------
USE:
1.) Load the program
2.) click the run button at the top
3.) Browse for the appropriate directory where your test file lies
4.) Once seleced the program will run automaticlly
5.) Return to the Directory where you chose your test file to find the results file
   